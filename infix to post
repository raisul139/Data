#include<stdio.h>
#include<ctype.h>

#define MAX 100
int stack[MAX];
int top=-1;

void push(char value)
{
    if(top<MAX-1)
    {
        stack[++top]=value;
    }
    else
    {
        printf("stack overflow\n");
    }
}
char pop()
{
    if(top!=-1)
    {
        return stack[top--];
    }
    return -1;
}
int isOperator(char x)
{
    return(x=='+'||x=='-'||x=='*'||x=='/'||x=='^');
}
int precedence(char x)
{
    if(x=='^'){
        return 3;}
    if(x=='*'||x=='/'){
        return 2;}
    if(x=='+'||x=='-'){
        return 1;}

    return 0;
}
void infixToPostfix(char infix[])
{
    int i,j=0;
    char postfix[MAX];
    char token;

    for(i=0;infix[i]!='\0';i++)
    {
        token=infix[i];
        if(isalnum(token))
        {
            postfix[j++]=token;
        }
        else if(token=='(')
        {
            push(token);

        }
        else if(token==')')
        {
            while(top!=-1&&stack[top]!='(')
            {
                postfix[j++]=pop();
            }
            pop();
        }
        else if(isOperator(token))
        {
            while(top!=-1&&precedence(stack[top])>=precedence(token))
            {
                postfix[j++]=pop();
            }
            push(token);
        }

        //printf("%s\n",postfix);
    }
    while(top!=-1)
        {
            postfix[j++]=pop();
        }
        postfix[j]='\0';
        printf("%s\n",postfix);


}
int main()
{
    char infix[MAX];
    printf("Enter the infix exp\n");
    gets(infix);
    infixToPostfix(infix);


    return 0;

}
